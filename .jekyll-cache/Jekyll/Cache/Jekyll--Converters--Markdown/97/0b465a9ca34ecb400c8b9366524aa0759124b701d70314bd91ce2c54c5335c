I"m<h2 id="room방">Room(방)</h2>
<ul>
  <li>Socket.IO에서 방은 여러 소켓들이 참여(join)하고 떠날 수 있는(leave) 채널을 말한다.</li>
  <li>방은 모든 클라이언트가 아니라, 일부 클라이언트에게 이벤트를 전송할 때 사용된다.</li>
  <li>방은 서버에서만 사용될 수 있는 개념이다.<br />
클라이언트는 자신이 참여(join)하고 있는 방 리스트에 접근할 수 없다.</li>
</ul>

<h3 id="방에-참여하고-떠나기">방에 참여하고 떠나기</h3>
<ul>
  <li>특정 클라이언트 소켓을 주어진 채널(룸)에 참여시키려면 <code class="language-plaintext highlighter-rouge">join()</code> 함수를 호출하면 된다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">io</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connection</span><span class="dl">'</span><span class="p">,</span> <span class="nx">socket</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">socket</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">'</span><span class="s1">some room</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<ul>
  <li>한 룸에 속하는 모든 클라이언트에게 이벤트를 전송하려면 <code class="language-plaintext highlighter-rouge">in</code> 혹은 <code class="language-plaintext highlighter-rouge">to</code> 함수를 호출하면 된다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">io</span><span class="p">.</span><span class="nx">to</span><span class="p">(</span><span class="dl">'</span><span class="s1">some room</span><span class="dl">'</span><span class="p">).</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">some event</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>여러 룸에 한번에 동일한 이벤트를 보낼 수 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">io</span><span class="p">.</span><span class="nx">to</span><span class="p">(</span><span class="dl">'</span><span class="s1">room1</span><span class="dl">'</span><span class="p">).</span><span class="nx">to</span><span class="p">(</span><span class="dl">'</span><span class="s1">room2</span><span class="dl">'</span><span class="p">).</span><span class="nx">to</span><span class="p">(</span><span class="dl">'</span><span class="s1">room3</span><span class="dl">'</span><span class="p">).</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">some event</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>-주의할 점: 이때 집합의 합집합 연산이 적용된다.<br />
즉, room1과 room2 동시에 존재하는 소켓일지라도, 한번의 이벤트만을 받는다.</p>

<ul>
  <li>또한 특정 소켓 인스턴스를 가지고, 해당 소켓이 속한 룸에 이벤트를 전송할 수 있다.<br />
이 경우 메서드가 호출된 소켓은 제외하고 나머지 소켓을 통해서만 이벤트가 전송된다.</li>
</ul>

<p><img src="https://socket.io/images/rooms2.png" alt="예시 사진" /></p>

<ul>
  <li>방에서 해당 소켓을 내보내려면 <code class="language-plaintext highlighter-rouge">join()</code>과 마찬가지로 <code class="language-plaintext highlighter-rouge">leave()</code>메서드를 호출하면 된다.</li>
</ul>

<h3 id="default-room">Default Room</h3>
<p><code class="language-plaintext highlighter-rouge">Socket.IO</code>의 모든 소켓은 랜덤이고, 추측불가능하며, 고유한 식별자인 아이디로 구분된다.</p>
<ul>
  <li>편의성을 위해서 각 소켓은 자신의 아이디로 구분되는 룸에 자동으로 참여된다.</li>
  <li>이런 특성 덕분에, private 한 메시지를 전송하는 것이 쉽다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">io</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">connection</span><span class="dl">"</span><span class="p">,</span> <span class="nx">socket</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">private message</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">anotherSocketId</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">socket</span><span class="p">.</span><span class="nx">to</span><span class="p">(</span><span class="nx">anotherSocketId</span><span class="p">).</span><span class="nx">emit</span><span class="p">(</span><span class="dl">"</span><span class="s2">private message</span><span class="dl">"</span><span class="p">,</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">msg</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="disconnection">Disconnection</h3>
<ul>
  <li>소켓이 연결이 끊기면, 자신이 속한 모든 채널을 떠나게(<code class="language-plaintext highlighter-rouge">leave</code>)된다.</li>
  <li><code class="language-plaintext highlighter-rouge">disconnecting</code> 이벤트를 리슨하고 있음으로써 연결이 끊긴 소켓이 존재했던 룸을 가지고 와서 추가적인 작업을 할 수 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">io</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connection</span><span class="dl">'</span><span class="p">,</span> <span class="nx">socket</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">disconnecting</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">socket</span><span class="p">.</span><span class="nx">rooms</span><span class="p">);</span> <span class="c1">// the Set contains at least the socket ID</span>
  <span class="p">});</span>

  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">disconnect</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// socket.rooms.size === 0</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

:ET