I"f7<h2 id="이벤트-전송">이벤트 전송</h2>
<ul>
  <li>Socket.IO에서 클라이언트와 서버간에 이벤트를 주고받을 수 있는 여러 방법이 존재한다.</li>
</ul>

<h3 id="1-기본적인-전송-방법">1. 기본적인 전송 방법</h3>
<ul>
  <li>
    <p>한쪽에서 이벤트를 발행하고, 다른쪽에서는 해당 이벤트 리스너를 등록하는 방법</p>
  </li>
  <li>
    <p>예시1. 서버에서 이벤트를 전송하고, 클라이언트에서 해당 이벤트 리스너를 등록</p>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server-side</span>
<span class="nx">io</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">connection</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">world</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// client-side</span>
<span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arg</span><span class="p">);</span> <span class="c1">// world</span>
<span class="p">});</span>
</code></pre></div></div>

<ul>
  <li>예시2. 예시1과 반대(서버에서 이벤트 리스너를 등록하고, 클라이언트에서 이벤트를 전송)
```javascript
// server-side
io.on(“connection”, (socket) =&gt; {
socket.on(“hello”, (arg) =&gt; {
  console.log(arg); // world
});
});</li>
</ul>

<p>// client-side
socket.emit(“hello”, “world”);</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
- **예시3. 이벤트와 함께 데이터를 전송하는 방법**
```javascript
// server-side
io.on("connection", (socket) =&gt; {
  socket.emit("hello", 1, "2", { 3: '4', 5: Buffer.from([6]) });
});

// client-side
socket.on("hello", (arg1, arg2, arg3) =&gt; {
  console.log(arg1); // 1
  console.log(arg2); // "2"
  console.log(arg3); // { 3: '4', 5: ArrayBuffer (1) [ 6 ] }
});
</code></pre></div></div>

<ul>
  <li>주의 사항: Map과 Set은 직렬화가 가능하지 않기 때문에, 수동으로 직렬화 시킨 후 전송해야 한다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">serializedMap</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">myMap</span><span class="p">.</span><span class="nx">entries</span><span class="p">()];</span>
<span class="kd">const</span> <span class="nx">serializedSet</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">mySet</span><span class="p">.</span><span class="nx">keys</span><span class="p">()];</span>
</code></pre></div></div>

<h3 id="2-acknowledgements">2. Acknowledgements</h3>
<ul>
  <li>기존의 요청, 응답 API 방식으로 이벤트를 주고 받는 것</li>
  <li>emit의 마지막 인자로 콜백함수를 넣을 수 있다.<br />
이 콜백함수는 상대방이 해당 emit으로 전송하는 이벤트를 수신하면, 콜백함수가 호출된다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server-side</span>
<span class="nx">io</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">connection</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">update item</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">arg1</span><span class="p">,</span> <span class="nx">arg2</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arg1</span><span class="p">);</span> <span class="c1">// 1</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arg2</span><span class="p">);</span> <span class="c1">// { name: "updated" }</span>
    <span class="nx">callback</span><span class="p">({</span>
      <span class="na">status</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ok</span><span class="dl">"</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="c1">// client-side</span>
<span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">"</span><span class="s2">update item</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">updated</span><span class="dl">"</span> <span class="p">},</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">);</span> <span class="c1">// ok</span>
<span class="p">});</span>
</code></pre></div></div>

<ul>
  <li>타임 아웃 이벤트에 대한 콜백은 기본적으로는 지원되지 않지만, 아래와 같이 구현할 수 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">withTimeout</span> <span class="o">=</span> <span class="p">(</span><span class="nx">onSuccess</span><span class="p">,</span> <span class="nx">onTimeout</span><span class="p">,</span> <span class="nx">timeout</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">called</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">called</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="nx">called</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="nx">onTimeout</span><span class="p">();</span>
  <span class="p">},</span> <span class="nx">timeout</span><span class="p">);</span>

  <span class="k">return</span> <span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">called</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="nx">called</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timer</span><span class="p">);</span>
    <span class="nx">onSuccess</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">withTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">success!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">},</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">timeout!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">1000</span><span class="p">));</span>
</code></pre></div></div>

<h3 id="3-volatile-event">3. volatile event</h3>
<ul>
  <li>volatile event란 근본적인 연결이 준비되지 않은 경우에는 발송되지 않는 이벤트이다.(신뢰성 측면에서 UDP와 유사하다.)</li>
  <li>예를 들어, 온라인 게임에서 캐릭터의 위치를 전송해야 하는 경우(최신 값만 유용하기 때문에) 흥미로울 수 있다.</li>
  <li>또는 클라이언트가 연결되지 않았을 때, 전송된 모든 이벤트가 사라지도록 할 때 유용합니다.<br />
(기본적으로 클라이언트가 연결되지 않았을 때 모든 이벤트는 버퍼에 저장된다.)</li>
  <li>예시</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server-side</span>
<span class="nx">io</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">connection</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">connect</span><span class="dl">"</span><span class="p">);</span>

  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">ping</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">count</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="c1">// client-side</span>
<span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">socket</span><span class="p">.</span><span class="nx">volatile</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">"</span><span class="s2">ping</span><span class="dl">"</span><span class="p">,</span> <span class="o">++</span><span class="nx">count</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>예시의 콘솔 출력</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">connect</span>
<span class="mi">1</span>
<span class="mi">2</span>
<span class="mi">3</span>
<span class="mi">4</span>
<span class="err">#</span> <span class="nx">the</span> <span class="nx">server</span> <span class="nx">is</span> <span class="nx">restarted</span><span class="p">,</span> <span class="nx">the</span> <span class="nx">client</span> <span class="nx">automatically</span> <span class="nx">reconnects</span>
<span class="nx">connect</span>
<span class="mi">9</span>
<span class="mi">10</span>
<span class="mi">11</span>
</code></pre></div></div>

<ul>
  <li>volatile이 없는 경우
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span>
<span class="mi">2</span>
<span class="mi">3</span>
<span class="mi">4</span>
<span class="err">#</span> <span class="nx">the</span> <span class="nx">server</span> <span class="nx">is</span> <span class="nx">restarted</span><span class="p">,</span> <span class="nx">the</span> <span class="nx">client</span> <span class="nx">automatically</span> <span class="nx">reconnects</span> <span class="nx">and</span> <span class="nx">sends</span> <span class="nx">its</span> <span class="nx">buffered</span> <span class="nx">events</span>
<span class="nx">connect</span>
<span class="mi">5</span>
<span class="mi">6</span>
<span class="mi">7</span>
<span class="mi">8</span>
<span class="mi">9</span>
<span class="mi">10</span>
<span class="mi">11</span>
</code></pre></div>    </div>
  </li>
</ul>
:ET